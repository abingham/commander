
Update could be _inside_ commander.
But better outside since the last step is for cyber-dojo to replace itself.
Dropped RELEASE env-var from main script.
[./cyber-dojo update] is now the only way to change what :latest is


#!/bin/bash
set -e
shift # update

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#  Use: cyber-dojo update [latest|RELEASE]
#
#  Example 1: change to latest (the default)
#
#    cyber-dojo update
#    cyber-dojo update latest
#
#    Pulls latest ready for the next [cyber-dojo up] command.
#    Tags it with its release number (eg 3.19.1)
#
#  Example 2: change to a given release
#
#    cyber-dojo update 2.7.31
#
#    Pulls 2.7.31 and tags it with latest
#    ready for the next [cyber-dojo up] command.
#
#  Example 3: change to a given tag
#
#    cyber-dojo update 3ec864c
#
#    Pulls 3ec864c and tags it with latest
#    ready for the next [cyber-dojo up] command.
#    Warns that you are on a development tag.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

readonly WAS_TAG=$(docker run --rm cyberdojo/versioner:latest sh -c 'echo -n ${RELEASE}')
if [ -n "${WAS_TAG}" ]; then
  docker tag cyberdojo/versioner:latest cyberdojo/versioner:${WAS_TAG}
fi

readonly RELEASE=${1:-latest}
readonly IMAGE=cyberdojo/versioner:${RELEASE}

if [ "${RELEASE}" = 'latest' ]; then
  docker pull ${IMAGE}
fi

readonly NOW_TAG=$(docker run --rm ${IMAGE} sh -c 'echo -n ${RELEASE}')
if [ "${RELEASE}" = 'latest' ]; then
  docker tag ${IMAGE} cyberdojo/versioner:${NOW_TAG}
elif [ -n "${NOW_TAG}" ]; then
  docker tag ${IMAGE} cyberdojo/versioner:latest
else
  echo "Warning: ${RELEASE} is dev only"
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
All commands always use versioner:latest to get commander's tag
Update is the only way you change versioner:latest

# The two tag commands are because you can do
# 1) ./cyber-dojo update 2.3.0
# 2) ./cyber-dojo update latest
# And if we do (2) we need to create a non-latest tag
# because latest moves and we want to keep a local history.

# How to set RELEASE env-var?
# Use commit message like  [ci skip]
# Eg
# [release=2.3.1]
# CI Scripts will have to detect this.
# Need the env-var on CircleCI for the commit message.
# Dockerfile will set RELEASE even it its empty string.


# Would be nice to colour bash fragments in the help text
# green examples stand out. Similarly, errors can be in red.
