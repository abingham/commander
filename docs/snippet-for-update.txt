
Update could be _inside_ commander.
But better outside since the last step is for cyber-dojo to replace itself.

$ ./cyber-dojo update [RELEASE]

#!/bin/bash
set -e
shift # update

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#  Use:
#  \$ ./cyber-dojo update [latest|RELEASE]
#
#  Example 1: update to latest (the default)
#    \$ ./cyber-dojo update
#    \$ ./cyber-dojo update latest
#    Pulls latest ready for the next [cyber-dojo up] command.
#    Tags it with its release number (eg 2.3.0)
#
#  Example 2: update to a release
#    \$ cyber-dojo update 2.3.0
#    Pulls 2.3.0 and tags it with latest
#    ready for the next [cyber-dojo up] command.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

RELEASE=${1:-latest}
IMAGE=cyberdojo/versioner:${RELEASE}

if [ "${RELEASE}" = 'latest' ]; then
  docker pull ${IMAGE}
fi

TAG=$(docker run --rm ${IMAGE} sh -c 'echo -n ${RELEASE}')

if [ "${RELEASE}" = 'latest' ]; then
  docker tag ${IMAGE} cyberdojo/versioner:${TAG}
elif [ "${TAG}" != '' ]; then
  docker tag ${IMAGE} cyberdojo/versioner:latest
else
  echo "ERROR: ${RELEASE} is dev only" && exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Instead of allowing
  ./cyber-dojo update 23df2e8
I think its simpler, in that case, to just do
  RELEASE=23df2e8 ./cyber-dojo up

# The two tag commands are because you can do
# 1) ./cyber-dojo update 2.3.0
# 2) ./cyber-dojo update latest
# And if we do (2) we need to create a non-latest tag
# because latest moves and we want to keep a local history.

# How to set RELEASE env-var?
# Use commit message like  [ci skip]
# Eg
# [release=2.3.1]
# Scripts will have to detect this.
# Need the env-var on CircleCI for the commit message.
# Can you do an if inside a Dockerfile. Probably not.
# Will need two Dockerfiles (for versioner).


# Would be nice to colour bash fragments in the help text
# green examples stand out. Similarly, errors can be in red.
