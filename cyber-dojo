#!/bin/bash

# Controls a cyber-dojo web server.
# requires: grep which is in DockerToolbox Quickstart Terminal.
#
# Most commands forward to, and run inside, the cyber-dojo
# commander container. However, a few commands are handled
# locally, on the host server, outside of the container.
# These are handled by docker_cat_and_run_directly().
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -

on_Mac()
{
  # https://stackoverflow.com/questions/394230
  [[ "$OSTYPE" == "darwin"* ]]
}

not_using_DockerToolbox()
{
  [[ -z "${DOCKER_MACHINE_NAME}" ]]
}

if not_using_DockerToolbox; then
  if on_Mac; then
    echo 'ERROR'
    echo 'On a Mac you must use Docker Toolbox.'
    echo 'Maybe you need to run:'
    echo '$ eval $(docker-machine env)'
    exit 1
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

readonly my_dir="$( cd "$( dirname "$0" )" && pwd )"
readonly cyber_dojo_commander=cyberdojo/commander

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

exit_non_zero_unless_docker_installed()
{
  local docker="${DOCKER_PROGRAM:-docker}"
  if ! hash "${docker}" 2> /dev/null; then
    >&2 echo 'ERROR: docker is not installed!'
    exit 2
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate_to_commander()
{
  if [ "$1" = 'up' ];  then
    set_env_file_volumes
  fi
  # shellcheck disable=SC2086
  # 2086 == Double quote to prevent globbing and word splitting.
  # CYBER_DOJO_ENV_ROOT must match Dockerfile
  docker run \
    --init \
    --rm \
    --interactive \
    --user=root \
    --env CYBER_DOJO_CUSTOM \
    --env CYBER_DOJO_EXERCISES \
    --env CYBER_DOJO_LANGUAGES \
    --env CYBER_DOJO_PORT \
    --env CYBER_DOJO_ENV_ROOT=/tmp/app \
    --env CYBER_DOJO_SH_ROOT="${my_dir}" \
    --env RELEASE \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    ${volume_grafana_env_file} \
    ${volume_nginx_env_file} \
    ${volume_web_env_file} \
      "${cyber_dojo_commander}" \
        /app/cmd/cyber-dojo.rb ${debug_option} "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set_env_file_volumes()
{
  # web:env_file: in docker-compose.yml
  local web_env="${my_dir}/web.env"
  if [ -f "${web_env}" ];  then
    volume_web_env_file="--volume=${web_env}:${web_env}:ro"
  fi
  # nginx:env_file: in docker-compose.yml
  local nginx_env="${my_dir}/nginx.env"
  if [ -f "${nginx_env}" ];  then
    volume_nginx_env_file="--volume=${nginx_env}:${nginx_env}:ro"
  fi
  # grafana:env_file: in docker-compose.yml
  local grafana_env="${my_dir}/grafana.env"
  if [ -f "${grafana_env}" ];  then
    volume_grafana_env_file="--volume=${grafana_env}:${grafana_env}:ro"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

docker_cat_and_run_directly()
{
  local script="${1}"
  shift
  docker run --rm -i cyberdojo/commander:latest \
    sh -c "cat /app/cmd/sh/${script}" > /tmp/${script}
  chmod +x /tmp/${script}
  /tmp/${script} $@
  exit $?
}

#==========================================================

if [ "$1" = '--debug' ]; then
  debug_option='--debug'
  shift
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ "$1" = 'update' ]; then
  if [ "$2" = '' ]; then
    exit_non_zero_unless_docker_installed
    docker pull ${cyber_dojo_commander}
  fi
  if [ "$2" = 'server' ] && [ "$3" = '' ]; then
    exit_non_zero_unless_docker_installed
    docker pull ${cyber_dojo_commander}
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

exit_non_zero_unless_docker_installed
if ! delegate_to_commander "$@"; then
  exit 5
fi

if [ "$1 $2" = 'start-point create' ]; then
  docker_cat_and_run_directly start-point-create.sh "$@"
fi

if [ "$1" = 'sh' ]; then
  docker_cat_and_run_directly sh.sh "$@"
fi

if [ "$1" = 'update' ]; then
  docker_cat_and_run_directly update.sh "$@"
fi
