#!/bin/bash
set -e
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The main cyber-dojo script cats this out of a
# commander container and runs it locally.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Most commands delegate to a commander container.
# However, a few commands are handled locally, on the host.
#   1) $ ./cyber-dojo start-point create NAME --custom <url> ...
#      This is to allow the <url>s to be local.
#   2) $ ./cyber-dojo sh web
#      This is because the delegation is to a ruby script
#      and not a bash script.
#   3) $ ./cyber-dojo update
#      This is simply historical.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate_to_commander()
{
  check_env_file_exists CYBER_DOJO_GRAFANA_ENV "${CYBER_DOJO_GRAFANA_ENV}"
  check_env_file_exists CYBER_DOJO_NGINX_ENV   "${CYBER_DOJO_NGINX_ENV}"
  check_env_file_exists CYBER_DOJO_WEB_ENV     "${CYBER_DOJO_WEB_ENV}"

  docker run \
    --env CYBER_DOJO_CUSTOM \
    --env CYBER_DOJO_EXERCISES \
    --env CYBER_DOJO_LANGUAGES \
    --env CYBER_DOJO_PORT \
    --rm \
    --user=root \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    $(volume_env_file grafana "${CYBER_DOJO_GRAFANA_ENV}") \
    $(volume_env_file nginx   "${CYBER_DOJO_NGINX_ENV}") \
    $(volume_env_file web     "${CYBER_DOJO_WEB_ENV}") \
      "$(commander_image_name)" \
        /app/cmd/cyber-dojo.rb ${debug_option} "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

commander_image_name()
{
  # Tests override COMMANDER_IMAGE (so they can use :latest)
  local -r VERSIONER_IMAGE=cyberdojo/versioner:latest
  local -r ENV_VARS=$(docker run --rm ${VERSIONER_IMAGE} sh -c 'cat /app/.env')
  local -r COMMANDER_VAR=$(echo "${ENV_VARS}" | grep 'CYBER_DOJO_COMMANDER_SHA')
  local -r COMMANDER_SHA=$(echo ${COMMANDER_VAR:25:99})
  local -r COMMANDER_TAG=${COMMANDER_SHA:0:7}
  local -r COMMANDER_IMAGE=${COMMANDER_IMAGE:-cyberdojo/commander:${COMMANDER_TAG}}
  echo "${COMMANDER_IMAGE}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

check_env_file_exists()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ -n "${name}" ]; then
    if [ -z "${DOCKER_MACHINE_NAME}" ]; then
      check_env_file_exists_on_host "${name}" "${path}"
    else
      check_env_file_exists_on_machine "${name}" "${path}"
    fi
  fi
}

check_env_file_exists_on_host()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ ! -f "${path}" ]; then
    local -r where='on the host'
    echo_env_var_error "${name}" "${path}" "${where}"
    exit 3
  fi
}

check_env_file_exists_on_machine()
{
  local -r name="${1}"
  local -r path="${2}"
  if ! docker-machine ssh "${DOCKER_MACHINE_NAME}" "[ -f ${path} ]" 2> /dev/null; then
    local -r where="on VM '${DOCKER_MACHINE_NAME}'"
    echo_env_var_error "${name}" "${path}" "${where}"
    exit 4
  fi
}

echo_env_var_error()
{
  local -r name="${1}"
  local -r path="${2}"
  local -r where="${3}"
  echo_red 'ERROR: bad environment variable'
  echo_red "${name}=${path}"
  echo_red "does not exist (${where})"
}

echo_red()
{
  local -r red=$(tput -Txterm setaf 1)
  local -r nc='\033[0m' # NoColour
  >&2 echo -e "${red}${1}${nc}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

volume_env_file()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ -n "${path}" ]; then
    echo "--volume=${path}:/app/env_files/custom.${name}.env:ro"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

extract_and_run()
{
  local -r script="${1}"
  shift
  docker run \
    --interactive \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    --rm \
    "$(commander_image_name)" \
    sh -c "/app/cmd/sh/cat-${script}" \
      > /tmp/${script}
  chmod 700 /tmp/${script}
  /tmp/${script} "$@"
  exit $?
}

#==========================================================

if [ "$1" = '--debug' ]; then
  shift
  debug_option='--debug'
fi

if [ "$1 $2" = 'start-point create' ]; then
  extract_and_run start-point-create.sh "$@"
elif [ "$1" = 'sh' ]; then
  extract_and_run sh.sh "$@"
elif [ "$1" = 'update' ]; then
  extract_and_run update.sh "$@"
elif ! delegate_to_commander "$@"; then
  exit 5
fi

exit 0
